%div.container
  %div.row
    %div.span3
      %ul.nav.nav-list.bs-docs-sidenav.affix.sidebar-nav
        %li
          %a{href: "#nav_home"} Home
        %li
          %a{href: "#nav_usage"} General Usage
        %li
          %a{href: "#nav_search"} Term Search
        %li
          %a{href: "#nav_prop_search"} Ontology Property Search
        %li
          %a{href: "#nav_annotator"} Annotator
        %li
          %a{href: "#nav_recommender"} Recommender
        %li
          %a{href: "#nav_resource_index"} Resource Index
        %li
          %a{href: "#nav_batch"} Batch
        %li
          %a{href: "#nav_ontology_analytics"} Ontology Analytics
        %li
          %a{href: "#nav_resource_endpoints"} Resources
          %ul.nav.nav-list
            %li
              %a{href: "#nav_media_types"} Media Types and Hypermedia Links
              %ul.nav.nav-list
                -@metadata_all.each do |cls|
                  %li
                    %a{href: "#" + cls[1][:cls].name.split("::").last}= cls[1][:cls].name.split("::").last
        %li
          %a{href: "#nav_content_types"} Content Types


    %div.span9

      %h1#nav_home EcoPortal REST API Documentation
      %h2#nav_usage General Usage
      %p
        This API is comprised of a set of resources (Ontologies, Classes, etc) and related endpoints (Search, Annotator, Recommender)
        that are connected together via links, much like webpages.
        We recommend that you try browsing the API using a web browser (Chrome and Firefox work very well while IE does not)
        before you start writing code.
        For more information, please see the documentation on
        %a{href: "#nav_media_types"} Media Types and Hypermedia Links
        or view our
        %a{href: "https://github.com/ncbo/ncbo_rest_sample_code"} sample code
        , available in Java, Python, Ruby and other languages (please email
        %a{href: "mailto:support@bioontology.org", target: "_blank"} support@bioontology.org
        if you would like examples in another language).


      %h3 Common Parameters
      %table.table.table-striped.table-bordered
        %tr
          %th Parameter
          %th Possible Values
          %th Description
        %tr
          %td apikey
          %td {your api key}
          %td
            %p
              An API Key is required to access any API call. It can be provided in three ways:
              %ol
                %li Using the <code>apikey</code> query string parameter
                %li Providing an <code>Authorization</code> header: <code>Authorization: apikey token=your_apikey</code> (replace `your_apikey` with your actual key)
                %li When using a web browser to explore the API, if you provide your API Key once using method 1, it will be stored in a cookie for subsequent requests. You can override this by providing a different API Key in a new call.
        %tr
          %td include
          %td
            all<br/>
            {comma-separated list of attributes, EX: attr1,attr2}
          %td
            %p
              By default, the API will show a subset of the available attributes for a given media type.
              This behavior can be overridden by providing <code>include=all</code> to show all attributes
              or <code>include=attribute1,attribute2</code> to include a specific list. The API is optimized
              to return the default values, so overriding this can impact the performance of your request.
            %p
              The <code>include=all</code> option is most useful for testing in the browser. Use it to identify
              the set of attributes required and use only those by passing them as a comma separated
              list, e.g. <code>include=prefLabel,cui</code>.
            %p
              The <code>include</code> parameter is currently unsupported on Annotator and Recommender endpoints.
        %tr
          %td format
          %td
            json<br/>
            jsonp<br/>
            xml
          %td
            The API returns JSON as the default content type. This can be overridden by using the <code>format</code>
            query string parameter. The API also respects <code>Accept</code> header entries, with precedence given
            to the <code>format</code> parameter.
        %tr
          %td page
          %td {integer representing the page number}
          %td
            For calls that are paged, this will indicate which page number you want to retrieve.
            You can follow hypermedia links for <code>nextPage</code> and <code>prevPage</code> as well.
        %tr
          %td pagesize
          %td {integer representing the size of the returned page}
          %td For calls that are paged, this will indicate the size of the page you want to retrieve.
        %tr
          %td include_views
          %td {boolean representing whether or not to include ontology views (default is false)}
          %td For calls that involve ontologies, include_views='true' will include ontology views.
        %tr
          %td display_context
          %td {true|false} (defaults to true)
          %td Turn off the JSON-LD context serialization. This will reduce the response size significantly for some calls, speeding up transmission and parse time.
        %tr
          %td display_links
          %td {true|false} (defaults to true)
          %td Turn off the hypermedia link serialization. This will reduce the response size significantly for some calls, speeding up transmission and parse time.
        %tr
          %td download_format
          %td {csv|rdf} (defaults to user-uploaded file format)
          %td Allows you to specify alternative formats for ontology file downloads for ontology and ontology submission download endpoints. CSV is only available for the most recent submission.

      %h2#nav_non_rest Search, Annotator, Recommender, and Resource Index Endpoints

      %p Several endpoints are available for performing lookups for classes, annotations, and annotated resources. These endpoints are not strictly RESTful, but do return objects with links where relevant.

      %h3#nav_search Term Search

      %p
        An endpoint for searching terms and their properties is available
        %ul
          %li
            Perform search
          %ul
            %li
              <span class="label label-info">GET</span> <span class="label label-info">POST</span> <code>/search?q={search query}</code>
            %li
              example:
              %a{href: "/search?q=melanoma"} /search?q=melanoma
          %li
            Parameters
            %ul
              %li ontologies={ontology_id1,ontology_id2,ontology_id3}
              %li require_exact_match={true|false}  // default = false
              %li suggest={true|false}  // default = false. Will perform a search specifically geared towards type-ahead suggestions.
              %li also_search_views={true|false}  // Include ontology views in the search. default = false
              %li require_definitions={true|false}  // default = false
              %li also_search_properties={true|false}  // default = false
              %li also_search_obsolete={true|false}  // default = false (exclude obsolete terms)
              %li cui={C0018787,C0225807,C0018787}  // Allows restricting query by CUIs. default = null (no restriction)
              %li semantic_types={T023,T185,T061}  // Allows restricting query by Semantic Types (TUI). default = null (no restriction)
              %li include={prefLabel, synonym, definition, notation, cui, semanticType} // default = (see Common Parameters section)
              %li page={integer representing the page number} // default = 1
              %li pagesize={integer representing the size of the returned page} // default = 50

        %h4#nav_search_subtree Subtree Search

        %p
          The same endpoint also allows limiting a search to a given subtree/branch. The root of the subtree is defined using a combination of parameters "ontology" and "subtree_root_id". Both are required when performing a subtree search.
          %ul
            %li
              Perform a subtree search
            %ul
              %li
                example:
                %a{href: "/search?q=melanoma&ontology=NCIT&subtree_root_id=http%3a%2f%2fncicb.nci.nih.gov%2fxml%2fowl%2fEVS%2fThesaurus.owl%23C3224"} /search?q=melanoma&ontology=NCIT&subtree_root_id=http%3a%2f%2fncicb.nci.nih.gov%2fxml%2fowl%2fEVS%2fThesaurus.owl%23C3224
            %li
              Parameters
              %ul
                %li ontology={ontology_id}
                %li subtree_root_id={a URI encoded class id of the root node of the subtree}

        %h4#nav_search_roots_only Roots Only Search

        %p
          The same endpoint allows limiting a search to root classes only.
          %ul
            %li
              Perform a roots-only search
            %ul
              %li
                example:
                %a{href: "/search?q=melanoma&ontologies=NCIT,GO&roots_only=true"} /search?q=melanoma&ontology=NCIT,GO&roots_only=true
            %li
              Parameters
              %ul
                %li roots_only={true|false}

      %h3#nav_prop_search Ontology Property Search

      %p
        An endpoint for searching ontology properties by their labels and IDs (URIs)
        %ul
          %li
            Perform search
          %ul
            %li
              <span class="label label-info">GET</span> <span class="label label-info">POST</span> <code>/property_search?q={search query}</code>
            %li
              example:
              %a{href: "/property_search?q=has dimension"} /property_search?q=has dimension
          %li
            Parameters
            %ul
              %li ontologies={ontology_id1,ontology_id2,ontology_id3}
              %li require_exact_match={true|false}  // Restricts results only to the exact matches of the query by the property id, label, or the generated label (a label, auto-generated from the ID). default = false
              %li also_search_views={true|false}  // Include ontology views in the search. default = false
              %li require_definitions={true|false}  // Filter results only to those that include definitions. default = false
              %li include={label, labelGenerated, definition, parents} // default = All of the properties in this example
              %li ontology_types={ONTOLOGY,VALUE_SET_COLLECTION} // default = all ontology types are returned
              %li property_types={object,annotation,datatype} // Restricts results to specific property types (object, annotation, datatype). default = all property types are returned
              %li page={integer representing the page number} // default = 1
              %li pagesize={integer representing the size of the returned page} // default = 50

      %h3#nav_annotator Annotator

      %p
        The Annotator endpoint will examine text input and return relevant classes.
        %ul
          %li Annotate text
          %ul
            %li
              <span class="label label-info">GET</span> <span class="label label-info">POST</span> <code>/annotator?text={input text}</code>
            %li
              example:
              %a{href: "/annotator?text=Melanoma+is+a+malignant+tumor+of+melanocytes+which+are+found+predominantly+in+skin+but+also+in+the+bowel+and+the+eye."} /annotator?text=Melanoma+is+a+malignant+tumor+of+melanocytes+which+are+found+predominantly+in+skin+but+also+in+the+bowel+and+the+eye.
          %li
            Parameters
            %ul
              %li
                Filtering & query behavior
                %ul
                  %li ontologies={ontology_id1,ontology_id2..,ontology_idN}
                  %li semantic_types={semType1,semType2..,semTypeN}
                  %li expand_semantic_types_hierarchy={true|false} // default = false. true means to use the semantic types passed in the "semantic_types" parameter as well as all their immediate children. false means to use ONLY the semantic types passed in the "semantic_types" parameter.
                  %li expand_class_hierarchy={true|false} // default = false. used only in conjunction with "class_hierarchy_max_level" parameter; determines whether or not to include ancestors of the given class when performing an annotation.
                  %li class_hierarchy_max_level={0..N} // default = 0. the depth of the hierarchy to use when performing an annotation.
                  %li expand_mappings={true|false} // default = false. true means that the following manual mappings will be used in annotation: UMLS, REST, CUI, OBOXREF.
                  %li stop_words={word1,word2..,wordN} (case insensitive)
                  %li minimum_match_length={0..N}
                  %li exclude_numbers={true|false}  // default = false
                  %li whole_word_only={true|false}  // default = true
                  %li exclude_synonyms={true|false}  // default = false
                  %li longest_only={true|false}  // default = false. true means that only the longest match for a given phrase will be returned.
          %li
            Default stop words
            %ul
              %li
                The following stop words are used by default:
                %ul
                  %li
                    I, a, above, after, against, all, alone, always, am, amount, an, and, any, are, around, as, at, back, be, before, behind, below, between, bill, both, bottom, by, call, can, co, con, de, detail, do, done, down, due, during, each, eg, eight, eleven, empty, ever, every, few, fill, find, fire, first, five, for, former, four, from, front, full, further, get, give, go, had, has, hasnt, he, her, hers, him, his, i, ie, if, in, into, is, it, last, less, ltd, many, may, me, mill, mine, more, most, mostly, must, my, name, next, nine, no, none, nor, not, nothing, now, of, off, often, on, once, one, only, or, other, others, out, over, part, per, put, re, same, see, serious, several, she, show, side, since, six, so, some, sometimes, still, take, ten, the, then, third, this, thick, thin, three, through, to, together, top, toward, towards, twelve, two, un, under, until, up, upon, us, very, via, was, we, well, when, while, who, whole, will, with, within, without, you, yourself, yourselves

      %h3#nav_recommender Recommender

      %p
        The Recommender endpoint receives a text or a list of keywords and suggests appropriate ontologies for them.
        %ul
          %li Recommend
          %ul
            %li
              <span class="label label-info">GET</span> <span class="label label-info">POST</span> <code>/recommender?input={input text or keywords}</code>
            %li
              example: suggest ontologies for the text "Melanoma is a malignant tumor of melanocytes which are found predominantly in skin but also in the bowel and the eye":
              %a{href: "/recommender?input=Melanoma%20is%20a%20malignant%20tumor%20of%20melanocytes%20which%20are%20found%20predominantly%20in%20skin%20but%20also%20in%20the%20bowel%20and%20the%20eye"} /recommender?input=Melanoma%20is%20a%20malignant%20tumor%20of%20melanocytes%20which%20are%20found%20predominantly%20in%20skin%20but%20also%20in%20the%20bowel%20and%20the%20eye
          %li
            Parameters
            %ul
              %li input_type={1|2} // default = 1. 1 means that the input type is text. 2 means that the input type is a list of comma separated keywords.
              %li output_type={1|2} // default = 1. 1 means that the output will be a ranked list of individual ontologies. 2 means that the output will be a ranked list of ontology sets.
              %li max_elements_set={2|3|4} // default = 3. Maximum number of ontologies per set (only for output_type = 2).
              %li wc={value in the range [0,1]} // default = 0.55. Weight assigned to the ontology coverage criterion.
              %li wa={value in the range [0,1]} // default = 0.15. Weight assigned to the ontology acceptance criterion.
              %li wd={value in the range [0,1]} // default = 0.15. Weight assigned to the ontology detail criterion.
              %li ws={value in the range [0,1]} // default = 0.15. Weight assigned to the ontology specialization criterion.
              %li ontologies={ontology_id1, ontology_id2, …, ontology_idN} // default = (empty) (all BioPortal ontologies will be evaluated).
          %li
            Additional examples
            %ul
              %li Suggest ontologies for the <u>keywords</u> "leukocyte, phagocyte, motile cell, metabolising cell, dendritic cell, pipette":
              %a{href: "/recommender?input=leukocyte,phagocyte,motile%20cell,metabolising%20cell,dendritic%20cell,%20pipette&input_type=2"} /recommender?input=leukocyte,phagocyte,motile%20cell,metabolising%20cell,dendritic%20cell,%20pipette&input_type=2
              %li Suggest ontologies for the <u>keywords</u> "leukocyte, phagocyte, motile cell, metabolising cell, dendritic cell, pipette", <u>limited to the ontologies UBERON, CL, NCIT and EFO</u>:
              %a{href: "/recommender?input=leukocyte,phagocyte,motile%20cell,metabolising%20cell,dendritic%20cell,%20pipette&input_type=2&ontologies=UBERON,CL,NCIT,EFO"} /recommender?input=leukocyte,phagocyte,motile%20cell,metabolising%20cell,dendritic%20cell,%20pipette&input_type=2&ontologies=UBERON,CL,NCIT,EFO
              %li Suggest <u>ontology sets</u> for the <u>keywords</u> "leukocyte, phagocyte, motile cell, metabolising cell, dendritic cell, pipette":
              %a{href: "/recommender?input=leukocyte,phagocyte,motile%20cell,metabolising%20cell,dendritic%20cell,%20pipette&input_type=2&output_type=2"} /recommender?input=leukocyte,phagocyte,motile%20cell,metabolising%20cell,dendritic%20cell,%20pipette&input_type=2&output_type=2
              %li Suggest ontologies for the text "Melanoma is a malignant tumor of melanocytes which are found predominantly in skin but also in the bowel and the eye", <u>limiting the evaluation to ontology coverage</u> (the weights for the other criteria -acceptance, detail and specialization- will be set to 0):
              %a{href: "/recommender?input=Melanoma%20is%20a%20malignant%20tumor%20of%20melanocytes%20which%20are%20found%20predominantly%20in%20skin%20but%20also%20in%20the%20bowel%20and%20the%20eye&wa=0&wd=0&ws=0"} /recommender?input=Melanoma%20is%20a%20malignant%20tumor%20of%20melanocytes%20which%20are%20found%20predominantly%20in%20skin%20but%20also%20in%20the%20bowel%20and%20the%20eye&wa=0&wd=0&ws=0

      %h3#nav_resource_index Resource Index

      %p
        The Resource Index contains a collection of annotated resources that can be searched by providing ontology acronyms with a corresponding class id or set of ids.
        %h4
          Parameters
        %ul
          %li <code>expand_class_hierarchy={true|false}</code>  Search for all of the descendants of the given class
          %li <code>boolean_operator={or|and}</code>  When searching for multiple classes, should documents include all classes (AND) or any class (OR)
        %h4
          Counts
        %p
          Requests to the counts endpoint will retrieve the number of documents in which the given classes are found.
        %ul
          %li
            Single class
            %ul
              %li
                <span class="label label-info">GET</span> <code>/resource_index/counts?classes[ontology_id1]=class_id1</code>
              %li
                example:
                %a{href: "/resource_index/counts?classes[http%3A%2F%2Fdata.bioontology.org%2Fontologies%2FSNOMEDCT]=http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F2092003"} /resource_index/counts?classes[http%3A%2F%2Fdata.bioontology.org%2Fontologies%2FSNOMEDCT]=http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F2092003
          %li
            Multiple classes, single ontology
            %ul
              %li
                <span class="label label-info">GET</span> <code>/resource_index/counts?classes[ontology_id1]=class_id1,class_id2</code>
              %li
                example:
                %a{href: "/resource_index/counts?classes[http%3A%2F%2Fdata.bioontology.org%2Fontologies%2FSNOMEDCT]=http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F2092003,http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F162573006"} /resource_index/counts?classes[http%3A%2F%2Fdata.bioontology.org%2Fontologies%2FSNOMEDCT]=http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F2092003,http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F162573006
          %li
            Multiple classes, multiple ontologies
            %ul
              %li
                <span class="label label-info">GET</span> <code>/resource_index/counts?classes[ontology_id1]=class_id1&classes[ontology_id2]=class_id1,class_id2</code>
              %li
                example:
                %a{href: "/resource_index/counts?classes[http%3A%2F%2Fdata.bioontology.org%2Fontologies%2FSNOMEDCT]=http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F2092003&classes[NEMO]=http%3A%2F%2Fpurl.bioontology.org%2FNEMO%2Fontology%2FNEMO.owl%23NEMO_7571000"} /resource_index/counts?classes[http%3A%2F%2Fdata.bioontology.org%2Fontologies%2FSNOMEDCT]=http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F2092003&classes[NEMO]=http%3A%2F%2Fpurl.bioontology.org%2FNEMO%2Fontology%2FNEMO.owl%23NEMO_7571000
        %h4
          Search
        %p
          Requests to the search endpoint will retrieve the documents in which given classes are found. The response is paged.
        %ul
          %li
            Single class
            %ul
              %li
                <span class="label label-info">GET</span> <code>/resource_index/resources/{resource_id}/search?classes[ontology_id1]=class_id1</code>
              %li
                example:
                %a{href: "/resource_index/resources/AE/search?classes[SNOMEDCT]=http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F2092003"} /resource_index/resources/AE/search?classes[http%3A%2F%2Fdata.bioontology.org%2Fontologies%2FSNOMEDCT]=http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F2092003
          %li
            Multiple classes, single ontology
            %ul
              %li
                <span class="label label-info">GET</span> <code>/resource_index/resources/{resource_id}/search?classes[ontology_id1]=class_id1,class_id2</code>
              %li
                example:
                %a{href: "/resource_index/resources/AE/search?classes[SNOMEDCT]=http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F2092003,http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F162573006"} /resource_index/resources/AE/search?classes[http%3A%2F%2Fdata.bioontology.org%2Fontologies%2FSNOMEDCT]=http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F2092003,http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F162573006
          %li
            Multiple classes, multiple ontologies
            %ul
              %li
                <span class="label label-info">GET</span> <code>/resource_index/resources/{resource_id}/search?classes[ontology_id1]=class_id1&classes[ontology_id2]=class_id1,class_id2</code>
              %li
                example:
                %a{href: "/resource_index/resources/AE/search?classes[SNOMEDCT]=http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F2092003&classes[NCIT]=http%3A%2F%2Fncicb.nci.nih.gov%2Fxml%2Fowl%2FEVS%2FThesaurus.owl%23C12470"} /resource_index/resources/AE/search?classes[http%3A%2F%2Fdata.bioontology.org%2Fontologies%2FSNOMEDCT]=http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F2092003&classes[http%3A%2F%2Fdata.bioontology.org%2Fontologies%2FNCIT]=http%3A%2F%2Fncicb.nci.nih.gov%2Fxml%2Fowl%2FEVS%2FThesaurus.owl%23C12470
        %h4
          Resources
        %ul
          %li
            All resources:
            %ul
              %li
                <span class="label label-info">GET</span> <code>/resource_index/resources</code>
              %li
                example:
                %a{href: "/resource_index/resources"} /resource_index/resources
          %li
            Specific resources:
            %ul
              %li
                <span class="label label-info">GET</span> <code>/resource_index/resources/{resource_id1}</code>
              %li
                example:
                %a{href: "/resource_index/resources/AE"} /resource_index/resources/AE


      %h2#nav_batch Batch Endpoints

      %p
        In order to reduce the number of HTTP requests required to obtain information about resources, we are exploring
        the use of batch endpoints that will use one request/response cycle for multiple resources. Currently, only
        classes are supported.

      %p
        :markdown
          <span class="label label-info">POST</span> <code>/batch</code>

          The batch service takes input in the BODY of a POST request. The input should be a JSON document with the following structure:

          <pre class="prettyprint linenums lang-javascript" style="display: table; padding-right: 20px;">
          {
              "http://www.w3.org/2002/07/owl#Class": {
                  "collection": [
                      {
                          "class": "http://example.org/ontology1/class1",
                          "ontology": "http://example.org/ontology1"
                      },
                      {
                          "class": "http://example.org/ontology2/class1",
                          "ontology": "http://example.org/ontology2"
                      },
                      {
                          "class": "http://example.org/ontologyN/classN",
                          "ontology": "http://example.org/ontologyN"
                      }
                  ],
                  "display": "prefLabel,synonym,semanticTypes"
              }
          }
          </pre>

          Example:

          <pre class="prettyprint linenums lang-javascript" style="display: table; padding-right: 20px;">
          {
              "http://www.w3.org/2002/07/owl#Class": {
                  "collection": [
                      {
                          "class": "http://bioontology.org/ontologies/BiomedicalResourceOntology.owl#Ontology_Development_and_Management",
                          "ontology": "http://data.bioontology.org/ontologies/BRO"
                      },
                      {
                        "class": "http://bioontology.org/ontologies/BiomedicalResourceOntology.owl#Modular_Component",
                          "ontology": "http://data.bioontology.org/ontologies/BRO"
                      },
                      {
                        "class": "http://bioontology.org/ontologies/BiomedicalResourceOntology.owl#Stimulator",
                          "ontology": "http://data.bioontology.org/ontologies/BRO"
                      }
                  ],
                  "display": "prefLabel,synonym,semanticTypes"
              }
          }
          </pre>

      %h2#nav_ontology_analytics Ontology Analytics

      %p
        An endpoint for retrieving ontology visitor stats provided by Google Analytics.

        %h4#nav_all_ontology_analytics Ontology Analytics by Month/Year

        %p
          Allows to retrieve analytics for all ontologies for a specific month/year combination
        %ul
          %li Get ALL analytics data
          %ul
            %li
              <span class="label label-info">GET</span> <code>/analytics</code>
            %li
              example:
              %a{href: "/analytics"} /analytics


          %li Get analytics data for a given month/year
          %ul
            %li
              <span class="label label-info">GET</span> <code>/analytics?month={month number}&year={year}</code>
            %li
              example:
              %a{href: "/analytics?month=4&year=2014"} /analytics?month=4&year=2014
          %li
            Parameters
            %ul
              %li month={1-12}
              %li year={2013-...}

        %h4#nav_single_ontology_analytics Single Ontology Analytics

        %p
          Allows to retrieve ALL analytics data for a single ontology
        %ul
          %li Get analytics data for a given ontology
          %ul
            %li
              <span class="label label-info">GET</span> <code>/ontologies/{acronym}/analytics</code>
            %li
              example:
              %a{href: "/ontologies/NCIT/analytics"} /ontologies/NCIT/analytics

      %h2#nav_resource_endpoints Resource Endpoints

      %p
        Endpoints for RESTful resources can be found below, specifically in the list of Media Types.
        Using the provided hypermedia links, you can navigate from resource to resource.
        Each Media Type has a corresponding collection URL (when available), a list of HTTP verbs that can
        be used to operate on the resources, a description of the resource (including available attributes),
        and a list of hypermedia links that can be found on each resource.

      %h2#nav_media_types Media Types and Hypermedia Links

      %h3 Documentation
      :markdown
        The documentation below describes the media types that available in the API and the hypermedia links that connect them.
        Media types describe the types of resources available, including the HTTP verbs that may be used with them and the
        attributes that each resource contains.

        #### Hypermedia Links
        This programming interface comprises HTTP commands that return objects that themselves contain links to other locations
        in the form of a URL.
        In addition to the actual return values, the returned objects contain a set of links to related information.
        You can access these links using HTTP commands, typically GET. Thus, it is possible to traverse BioPortal's information for
        an ontology, including classes, notes, and reviews, by starting from the list of ontologies and traversing the available
        links - either programmatically or in a browser. The different resources are described below, including information about
        their available attributes, links, and the HTTP verbs that can be used to interact with them.

        #### HTTP Verbs
        The API uses different verbs to support processing of resources. This includes things like creating or deleting
        individual resources or something more specific searching or annotating. Typically, the verbs will be used in
        conjunciton with the URL that represents the id for a given resource. Here is how we interpret the verbs:

        - <span class="label label-info">GET</span> Used to retreive a resource or collection of resources.
        - <span class="label label-info">POST</span> Used to create a resource when the server determines the resource's id.
        - <span class="label label-info">PUT</span> Used to create a resource when a client determines the resource's id.
        - <span class="label label-info">PATCH</span> Used to modify an existing resource. The attributes in a PATCH request will replace existing attributes.
        - <span class="label label-info">DELETE</span> Used to delete an existing resource.

        #### Available Media Types
      %ol
        -@metadata_all.each do |cls|
          %li
            %a{href: "#" + cls[1][:cls].name.split("::").last}= cls[1][:uri]

      -@metadata_all.each do |cls, type|
        -@metadata = type
        =render(:haml, "documentation/metadata".to_sym)

      %h2#nav_content_types Content Types

      :markdown
        The API returns JSON as the default content type. This can be overridden by using the `format`
        query string parameter with the value `json`, `jsonp`, or `xml`. The API also respects `Accept` header entries
        (EX: `application/json`, `application/xml`), with precedence given to the `format` parameter.

        #### JSON
        The default content type is JSON, specifically a variant called [JSON-LD](http://json-ld.org/),
        or JSON Linked Data. You can treat this variant like normal JSON. All JSON parsers will be able
        to parse the output normally. The benefit of JSON-LD is that it enables hypermedia links, and you
        will find these links exposed as URLs in attributes labeled `@id`, which correspond to the id of the
        parent resource, or in an array called `links`, which contains a hash of link types with corresponding URLs.

        Here is a sample output of the JSON response format:
        <pre class="prettyprint linenums lang-javascript" style="display: table; padding-right: 20px;">
        {
            "administeredBy": [
                "http://data.bioontology.org/user/nevada"
            ],
            "acronym": "ABA-API-TST",
            "name": "ABA Adult Mouse Brain",
            "@id": "http://data.bioontology.org/ontology/ABA-API-TST",
            "@type": "http://data.bioontology.org/metadata/Ontology",
            "links": {
                "metrics": "http://data.bioontology.org/ontologies/ABA-API-TST/metrics",
                "submissions": "http://data.bioontology.org/ontologies/ABA-API-TST/submissions",
                "classes": "http://data.bioontology.org/ontologies/ABA-API-TST/classes",
                "roots": "http://data.bioontology.org/ontologies/ABA-API-TST/classes/roots",
                "reviews": "http://data.bioontology.org/ontologies/ABA-API-TST/reviews"
            },
            "@context": {
                "@vocab": "http://data.bioontology.org/metadata/",
                "acronym": "http://omv.ontoware.org/2005/05/ontology#acronym",
                "name": "http://omv.ontoware.org/2005/05/ontology#name",
                "administeredBy": {
                    "@id": "http://data.bioontology.org/metadata/User",
                    "@type": "@id"
                }
            }
        }
        </pre>

        - Line 7 shows the id for the resource. Doing an HTTP GET on the id will retreive the resource.
        - Line 8 shows the media type (see below).
        - Line 9 starts the links hash.
        - Line 16 is the resource's context, which can be used to determine the type for lists of ids. For example, line 2 lists
          the ids for users who administer the ontology, which can be determined by looking for the `administeredBy` attribute
          in the `@context` hash.
        - If you are interested in the predicate URI values used in the resource, these can be deterined by looking up the
          attribute in the `@context` hash or by appending the value of `@vocab` (line 17) to an attribute name in cases where
          the attribute isn't listed specifically in the `@context`.

        #### XML
        XML is also available as an alternative content type.

      %p Here is sample output for the XML format:
      <pre class="prettyprint linenums lang-xml" style="display: table; padding-right: 20px;">
      :escaped
        <ontology>
          <administeredByCollection>
            <administeredBy>http://data.bioontology.org/user/nevada</administeredBy>
          </administeredByCollection>
          <acronym>ABA-API-TST</acronym>
          <name>ABA Adult Mouse Brain</name>
          <id>http://data.bioontology.org/ontology/ABA-API-TST</id>
          <links>
            <self href="http://data.bioontology.org/ontology/ABA-API-TST" rel="http://data.bioontology.org/metadata/Ontology"/>
            <metrics href="/ontologies/ABA-API-TST/metrics"/>
            <submissions href="/ontologies/ABA-API-TST/submissions" rel="http://data.bioontology.org/metadata/OntologySubmission"/>
            <classes href="/ontologies/ABA-API-TST/classes" rel="http://www.w3.org/2002/07/owl#Class"/>
            <roots href="/ontologies/ABA-API-TST/classes/roots" rel="http://www.w3.org/2002/07/owl#Class"/>
            <reviews href="/ontologies/ABA-API-TST/reviews" rel="http://data.bioontology.org/metadata/Review"/>
          </links>
        </ontology>
      </pre>

      :markdown
        - Line 8 starts the links section
        - Lines 9-14 list links by type. The `href` attribute contains the link location and the `rel` attribute defines the type
          of resource that will be found at that location.
        - Elements outside of the links can also contain `href` and `rel` attributes (coming soon...)

